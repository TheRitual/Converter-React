{"version":3,"sources":["Converter/index.js","Header/index.js","List/index.js","App.js","reportWebVitals.js","index.js"],"names":["Converter","props","className","onSubmit","event","preventDefault","console","log","setSavedList","savedList","valPLN","Number","valuePLN","toFixed","valCUR","valueCUR","rate","code","currency","htmlFor","onChange","setCurrency","target","value","setRate","getRate","setValueCUR","id","currencyList","map","index","type","step","toString","setValuePLN","min","autoFocus","Header","List","record","App","useState","bid","ask","setCurrencyList","dataReceived","setDataReceived","fetchData","useCallback","a","fetch","response","json","jsonData","rates","useEffect","filter","cur","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.17ba242b.chunk.js","sourcesContent":["import \"./style.css\";\r\n\r\nconst Converter = (props) => {\r\n    \r\n    const onChangeCurrency = (event) => {\r\n        props.setCurrency(event.target.value);\r\n        props.setRate(props.getRate(event.target.value));\r\n        props.setValueCUR(Number(props.valuePLN / props.rate).toFixed(2));\r\n    }\r\n\r\n    const onValuePLNChange = (event) => {\r\n        props.setValuePLN(Number(event.target.value));\r\n        props.setValueCUR(Number(event.target.value / props.rate).toFixed(2));\r\n    }\r\n\r\n    const onValueCURChange = (event) => {\r\n        props.setValueCUR(Number(event.target.value));\r\n        props.setValuePLN(Number(event.target.value * props.rate).toFixed(2));\r\n    }\r\n\r\n    const save = (event) => {\r\n        event.preventDefault();\r\n        console.log(\"saving position\");\r\n        props.setSavedList(\r\n            [...props.savedList, {\r\n                valPLN : Number(props.valuePLN).toFixed(2),\r\n                valCUR : Number(props.valueCUR).toFixed(2),\r\n                rate : props.rate,\r\n                code : props.currency,\r\n            }]\r\n        );\r\n    }\r\n\r\n   \r\n        return (\r\n            <section className=\"converter\">\r\n                <h2 className=\"converter__header\">Converter</h2>\r\n                <form className=\"converter__form\" onSubmit={save}>\r\n                    <p>\r\n                        <label htmlFor=\"currencyField\">Currency: </label>\r\n                        <select onChange={onChangeCurrency} id=\"currencyList\" className=\"converter__select\">\r\n                            {\r\n                                props.currencyList.map((currency, index) => {\r\n                                    return (<option key={index} value={currency.code}>{currency.code}</option>);\r\n                                })\r\n                            }\r\n                        </select>\r\n                    </p>\r\n                    <p>\r\n                        <input type=\"number\" step=\"any\" value={Number(props.valuePLN).toString()} onChange={onValuePLNChange} min=\"0\" id=\"valuePLN\" className=\"converter__field\" autoFocus />\r\n                        <label htmlFor=\"valuePLN\">PLN</label>\r\n                    </p>\r\n\r\n                    <p>\r\n                        <input type=\"number\" step=\"any\" value={Number(props.valueCUR).toString()} onChange={onValueCURChange} min=\"0\" id=\"currencyField\" className=\"converter__field\" />\r\n                        <label htmlFor=\"currencyField\">{props.currency}</label>\r\n                    </p>\r\n                    <p className=\"converter__paragraph\">\r\n                        {props.currency} rate: <span className=\"converter__rate\">{props.rate}</span>\r\n                        <button className=\"converter__button\">Save</button>\r\n                    </p>\r\n                </form>\r\n            </section>);\r\n};\r\n\r\nexport default Converter;","import \"./style.css\";\r\n\r\nconst Header = () => (\r\n    <header className=\"header\">\r\n        <h1 className=\"header__header\">Currency Exchange</h1>\r\n    </header>\r\n);\r\n\r\nexport default Header;","import \"./style.css\";\r\n\r\nconst List = ({savedList}) => {   \r\n        return (\r\n            <section className=\"list\">\r\n                <h2 className=\"list__header\">Saved</h2>\r\n                <ul className=\"list__savedList\">\r\n                    {savedList.map((record, index) => {\r\n                        return(\r\n                            <li key={index} className=\"list__savedPositions\">\r\n                                {record.valPLN}&nbsp;<span className=\"list__code\">PLN</span>&nbsp;âž¤&nbsp;\r\n                                {record.valCUR}&nbsp;<span className=\"list__code\">{record.code}</span>\r\n                            </li>\r\n                        );\r\n                    } )}\r\n                </ul>         \r\n            </section>);\r\n};\r\n\r\nexport default List;","import { useState, useEffect, useCallback } from \"react\";\nimport Converter from \"./Converter\";\nimport Header from \"./Header\";\nimport List from \"./List\";\nimport \"./App.css\";\n\n\nfunction App() {\n\n  const [currencyList, setCurrencyList] = useState([{ currency: \"loading\", code: \"LOADING\", bid: 6.66, ask: 6.66 }]);\n  const [dataReceived, setDataReceived] = useState(false);\n  const [savedList, setSavedList] = useState([]);\n  const [rate, setRate] = useState(3.8551);\n  const [currency, setCurrency] = useState(\"LOADING\");\n  const [valuePLN, setValuePLN] = useState(1.00);\n  const [valueCUR, setValueCUR] = useState(1.00);\n\n  const getRate = (currency = \"USD\") => currencyList.filter(cur => cur.code === currency)[0].bid;\n\n  const fetchData = useCallback(async () => {\n    if (!dataReceived) {\n      console.log(\"Connecting to NBP\");\n      try {\n        const response = await fetch(\"https://api.nbp.pl/api/exchangerates/tables/C/?format=json\");\n        const jsonData = await response.json();\n        console.log(\"Response received\");\n        setDataReceived(true);\n        setCurrencyList(jsonData[0].rates);\n        setCurrency(jsonData[0].rates[0].code);\n        setRate(jsonData[0].rates[0].bid);\n        setValuePLN(Number(rate).toFixed(2));\n      } catch (error) {\n        console.log(\"Can't connect to NBP\");\n        console.log(error);\n      }\n    } else {\n      return null;\n    }\n  }\n    , [rate, dataReceived]);\n\n  useEffect(() => {\n    fetchData();\n  }, [fetchData]);\n\n  return (\n    <main>\n      <Header />\n      <div className=\"box\">\n        <Converter\n          setCurrency={setCurrency}\n          currency={currency}\n          valuePLN={valuePLN}\n          setValuePLN={setValuePLN}\n          valueCUR={valueCUR}\n          setValueCUR={setValueCUR}\n          getRate={getRate}\n          currencyList={currencyList}\n          setRate={setRate}\n          rate={rate}\n          savedList={savedList}\n          setSavedList={setSavedList}\n        />\n        <List savedList={savedList} setSavedList={setSavedList}/>\n      </div>\n    </main>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}