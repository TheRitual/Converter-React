{"version":3,"sources":["Converter/index.js","Header/index.js","List/index.js","App.js","reportWebVitals.js","index.js"],"names":["Converter","valuePLN","valueCUR","setValueCUR","setValuePLN","setRate","rate","setCurrency","getBid","setSavedList","currency","savedList","currencyList","useEffect","Number","toFixed","className","onSubmit","event","preventDefault","console","log","valPLN","valCUR","code","htmlFor","onChange","target","value","id","map","index","type","step","toString","min","autoFocus","Header","List","record","App","useState","bid","ask","setCurrencyList","dataReceived","setDataReceived","fetchData","useCallback","a","fetch","response","json","jsonData","rates","filter","cur","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.098eeabe.chunk.js","sourcesContent":["import \"./style.css\";\r\nimport { useEffect } from \"react\";\r\n\r\nconst Converter = ({ valuePLN, valueCUR, setValueCUR, setValuePLN, setRate, rate, setCurrency, getBid, setSavedList, currency, savedList, currencyList }) => {\r\n\r\n    const onChangeCurrency = (event) => {\r\n        setCurrency(event.target.value);\r\n    }\r\n\r\n    useEffect(() => {\r\n        setRate(getBid(currency));\r\n        setValueCUR(Number(valuePLN / rate).toFixed(2));\r\n        // eslint-disable-next-line\r\n    }, [currency, rate]);\r\n\r\n    const onValuePLNChange = (event) => {\r\n        setValuePLN(Number(event.target.value));\r\n    }\r\n    \r\n    useEffect(() => {\r\n        setValueCUR(Number(valuePLN / rate).toFixed(2));\r\n        // eslint-disable-next-line\r\n    }, [valuePLN]);\r\n\r\n    const onValueCURChange = (event) => {\r\n        setValueCUR(Number(event.target.value));\r\n        setValuePLN(Number(event.target.value * rate).toFixed(2));\r\n    }\r\n\r\n    const save = (event) => {\r\n        event.preventDefault();\r\n        console.log(\"saving position\");\r\n        setSavedList(\r\n            [{\r\n                valPLN: Number(valuePLN).toFixed(2),\r\n                valCUR: Number(valueCUR).toFixed(2),\r\n                rate: rate,\r\n                code: currency,\r\n            }, ...savedList]\r\n        );\r\n    }\r\n\r\n\r\n    return (\r\n        <section className=\"converter\">\r\n            <h2 className=\"converter__header\">Converter</h2>\r\n            <form className=\"converter__form\" onSubmit={save}>\r\n                <p>\r\n                    <label htmlFor=\"currencyField\">Currency: </label>\r\n                    <select onChange={onChangeCurrency} id=\"currencyList\" className=\"converter__select\">\r\n                        {\r\n                            currencyList.map((currency, index) => {\r\n                                return (<option key={index} value={currency.code}>{currency.code}</option>);\r\n                            })\r\n                        }\r\n                    </select>\r\n                </p>\r\n                <p>\r\n                    <input type=\"number\" step=\"any\" value={Number(valuePLN).toString()} onChange={onValuePLNChange} min=\"0\" id=\"valuePLN\" className=\"converter__field\" autoFocus />\r\n                    <label htmlFor=\"valuePLN\" className=\"converter__code\">PLN</label>\r\n                </p>\r\n\r\n                <p>\r\n                    <input type=\"number\" step=\"any\" value={Number(valueCUR).toString()} onChange={onValueCURChange} min=\"0\" id=\"currencyField\" className=\"converter__field\" />\r\n                    <label htmlFor=\"currencyField\" className=\"converter__code\">{currency}</label>\r\n                </p>\r\n                <p className=\"converter__paragraph\">\r\n                    {currency} rate: <span className=\"converter__rate\">{rate}</span>\r\n                    <button className=\"converter__button\">Save</button>\r\n                </p>\r\n            </form>\r\n        </section>);\r\n};\r\n\r\nexport default Converter;","import \"./style.css\";\r\n\r\nconst Header = () => (\r\n    <header className=\"header\">\r\n        <h1 className=\"header__header\">Currency Exchange</h1>\r\n    </header>\r\n);\r\n\r\nexport default Header;","import \"./style.css\";\r\n\r\nconst List = ({savedList}) => {   \r\n        return (\r\n            <section className=\"list\">\r\n                <h2 className=\"list__header\">Saved</h2>\r\n                <ul className=\"list__savedList\">\r\n                    {savedList.map((record, index) => {\r\n                        return(\r\n                            <li key={index} className=\"list__savedPositions\">\r\n                                {record.valPLN}&nbsp;<span className=\"list__code\">PLN</span>&nbsp;âž¤&nbsp;\r\n                                {record.valCUR}&nbsp;<span className=\"list__code\">{record.code}</span>\r\n                            </li>\r\n                        );\r\n                    } )}\r\n                </ul>         \r\n            </section>);\r\n};\r\n\r\nexport default List;","import { useState, useEffect, useCallback } from \"react\";\nimport Converter from \"./Converter\";\nimport Header from \"./Header\";\nimport List from \"./List\";\nimport \"./App.css\";\n\n\nfunction App() {\n\n  const [currencyList, setCurrencyList] = useState([{ currency: \"LOADING\", code: \"USD\", bid: 6.66, ask: 6.66 }]);\n  const [dataReceived, setDataReceived] = useState(false);\n  const [savedList, setSavedList] = useState([]);\n  const [rate, setRate] = useState(3.8551);\n  const [currency, setCurrency] = useState(\"USD\");\n  const [valuePLN, setValuePLN] = useState(1.00);\n  const [valueCUR, setValueCUR] = useState(1.00);\n\n  const getBid = (currency = \"USD\") => currencyList.filter(cur => cur.code === currency)[0].bid;\n\n  const fetchData = useCallback(async () => {\n    if (!dataReceived) {\n      console.log(\"Connecting to NBP\");\n      try {\n        const response = await fetch(\"https://api.nbp.pl/api/exchangerates/tables/C/?format=json\");\n        const jsonData = await response.json();\n        console.log(\"Response received\");\n        setDataReceived(true);\n        setCurrencyList(jsonData[0].rates);\n        setCurrency(jsonData[0].rates[0].code);\n        setRate(jsonData[0].rates[0].bid);\n        setValuePLN(Number(rate).toFixed(2));\n      } catch (error) {\n        console.log(\"Can't connect to NBP\");\n        console.log(error);\n      }\n    } else {\n      return null;\n    }\n  }\n    , [rate, dataReceived]);\n\n  useEffect(() => {\n    fetchData();\n  }, [fetchData]);\n\n  return (\n    <main>\n      <Header />\n      <div className=\"box\">\n        <Converter\n          setCurrency={setCurrency}\n          currency={currency}\n          valuePLN={valuePLN}\n          setValuePLN={setValuePLN}\n          valueCUR={valueCUR}\n          setValueCUR={setValueCUR}\n          getBid={getBid}\n          currencyList={currencyList}\n          setRate={setRate}\n          rate={rate}\n          savedList={savedList}\n          setSavedList={setSavedList}\n        />\n        <List savedList={savedList} setSavedList={setSavedList}/>\n      </div>\n    </main>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}