{"version":3,"sources":["Converter/Clock/index.js","Converter/index.js","Header/index.js","List/index.js","App.js","reportWebVitals.js","index.js"],"names":["Clock","useState","Date","toISOString","time","setTime","useEffect","intervalId","setInterval","clearInterval","className","toLocaleString","undefined","month","weekday","day","year","hour","minute","second","value","getMilliseconds","getSeconds","max","Converter","valuePLN","valueCUR","setValueCUR","setValuePLN","setRate","rate","setCurrency","getBid","setSavedList","currency","savedList","currencyList","Number","toFixed","onSubmit","event","preventDefault","valPLN","valCUR","id","length","code","date","htmlFor","onChange","target","map","index","type","step","toString","min","autoFocus","Header","List","onClick","record","title","filter","App","localStorageList","localStorage","getItem","JSON","parse","bid","ask","setCurrencyList","dataReceived","setDataReceived","setItem","stringify","fetchData","useCallback","a","console","log","fetch","response","json","jsonData","rates","cur","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.73cd9496.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport \"./style.css\"\r\n\r\nconst Clock = () => {\r\n    const [time, setTime] = useState(new Date().toISOString());\r\n\r\n    useEffect(() => {\r\n        const intervalId = setInterval(() => {\r\n            setTime(new Date().toISOString());\r\n        }, 100);\r\n        return () => {\r\n            clearInterval(intervalId);\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <section className=\"clock\">\r\n            <div className=\"clock__information\">\r\n                {new Date(time).toLocaleString(undefined, {\r\n                    month: \"long\",\r\n                    weekday: \"long\",\r\n                    day: \"numeric\",\r\n                    year: \"numeric\",\r\n                    hour: \"numeric\",\r\n                    minute: \"numeric\",\r\n                    second: \"numeric\",\r\n                })}\r\n            </div>\r\n            <progress value={new Date(time).getMilliseconds() + new Date(time).getSeconds() * 1000} max=\"60000\" className=\"clock__bar\" />\r\n        </section>\r\n    );\r\n}\r\n\r\nexport default Clock;","import \"./style.css\";\r\nimport { useEffect } from \"react\";\r\nimport Clock from \"./Clock\"\r\n\r\nconst Converter = ({ valuePLN, valueCUR, setValueCUR, setValuePLN, setRate, rate, setCurrency, getBid, setSavedList, currency, savedList, currencyList }) => {\r\n\r\n    const onChangeCurrency = (event) => {\r\n        setCurrency(event.target.value);\r\n    }\r\n\r\n    useEffect(() => {\r\n        setRate(getBid(currency));\r\n        setValueCUR(Number(valuePLN / rate).toFixed(2));\r\n        // eslint-disable-next-line\r\n    }, [currency, rate]);\r\n\r\n    const onValuePLNChange = (event) => {\r\n        setValueCUR(Number(event.target.value / rate).toFixed(2));\r\n        setValuePLN(Number(event.target.value));\r\n    }\r\n\r\n    const onValueCURChange = (event) => {\r\n        setValueCUR(Number(event.target.value));\r\n        setValuePLN(Number(event.target.value * rate).toFixed(2));\r\n    }\r\n\r\n    const save = (event) => {\r\n        event.preventDefault();\r\n\r\n        setSavedList(\r\n            [{\r\n                valPLN: Number(valuePLN).toFixed(2),\r\n                valCUR: Number(valueCUR).toFixed(2),\r\n                id: savedList.length ? savedList[0].id + 1 : 0,\r\n                code: currency,\r\n                rate: rate,\r\n                date: new Date().toISOString(),\r\n            }, ...savedList]\r\n        );\r\n    }\r\n\r\n\r\n    return (\r\n        <section className=\"converter\">\r\n            <h2 className=\"converter__header\">Converter</h2>\r\n            <Clock>\r\n\r\n            </Clock>\r\n            <form className=\"converter__form\" onSubmit={save}>\r\n                <p>\r\n                    <label htmlFor=\"currencyField\">Currency: </label>\r\n                    <select onChange={onChangeCurrency} id=\"currencyList\" className=\"converter__select\">\r\n                        {\r\n                            currencyList.map((currency, index) => {\r\n                                return (<option key={index} value={currency.code}>{currency.code}</option>);\r\n                            })\r\n                        }\r\n                    </select>\r\n                </p>\r\n                <p>\r\n                    <input type=\"number\" step=\"any\" value={Number(valuePLN).toString()} onChange={onValuePLNChange} min=\"0\" id=\"valuePLN\" className=\"converter__field\" autoFocus />\r\n                    <label htmlFor=\"valuePLN\" className=\"converter__code\">PLN</label>\r\n                </p>\r\n\r\n                <p>\r\n                    <input type=\"number\" step=\"any\" value={Number(valueCUR).toString()} onChange={onValueCURChange} min=\"0\" id=\"currencyField\" className=\"converter__field\" />\r\n                    <label htmlFor=\"currencyField\" className=\"converter__code\">{currency}</label>\r\n                </p>\r\n                <p className=\"converter__paragraph\">\r\n                    {currency} rate: <span className=\"converter__rate\">{rate}</span>\r\n                    <button className=\"converter__button\">Save</button>\r\n                </p>\r\n            </form>\r\n        </section>);\r\n};\r\n\r\nexport default Converter;","import \"./style.css\";\r\n\r\nconst Header = () => (\r\n    <header className=\"header\">\r\n        <h1 className=\"header__header\">Currency Exchange</h1>\r\n    </header>\r\n);\r\n\r\nexport default Header;","import \"./style.css\";\r\n\r\nconst List = ({ savedList, setSavedList }) => {\r\n    const removeItem = (id) => {\r\n        setSavedList(savedList => savedList.filter(record => record.id !== id));\r\n    }\r\n\r\n    const clearList = () => {\r\n        setSavedList([]);\r\n    }\r\n\r\n    return (\r\n        <section className=\"list\">\r\n            <h2 className=\"list__header\">Saved</h2>\r\n            {savedList.length > 0 ? <button className=\"list__clearListButton\" onClick={clearList} >Clear All</button> : \"\"}\r\n            <ul className=\"list__savedList\">\r\n                {savedList.map((record) => {\r\n                    return (\r\n                        <li key={record.id} className=\"list__savedPositions\" title={(Date(record.date) + \" rate: \" + record.rate)}>\r\n                            <div className=\"list_positionElement\">\r\n                                <span className=\"list__value\">{record.valPLN}</span>&nbsp;\r\n                                <span className=\"list__code\">PLN</span>&nbsp;\r\n                            </div>\r\n                            <div className=\"list_positionElement\">\r\n                                &nbsp;➤&nbsp;\r\n                            </div>\r\n                            <div className=\"list_positionElement\">\r\n                                <span className=\"list__value\">{record.valCUR}</span>&nbsp;\r\n                                <span className=\"list__code\">{record.code}</span>&nbsp;\r\n                            </div>\r\n                            <div className=\"list_positionElement\">\r\n                                <button className=\"list__removeButton\" onClick={() => removeItem(record.id)} >&#10006;</button>\r\n                            </div>\r\n                        </li>\r\n                    );\r\n                })}\r\n            </ul>\r\n        </section>);\r\n};\r\n\r\nexport default List;","import { useState, useEffect, useCallback } from \"react\";\r\nimport Converter from \"./Converter\";\r\nimport Header from \"./Header\";\r\nimport List from \"./List\";\r\nimport \"./App.css\";\r\n\r\n\r\nfunction App() {\r\n\r\n  const localStorageList = localStorage.getItem(\"savedList\");\r\n  const [savedList, setSavedList] = useState(\r\n    localStorageList ?\r\n    JSON.parse(localStorageList) :\r\n    []\r\n  );\r\n\r\n  const [currencyList, setCurrencyList] = useState([{ currency: \"LOADING\", code: \"USD\", bid: 6.66, ask: 6.66 }]);\r\n  const [dataReceived, setDataReceived] = useState(false);\r\n  const [rate, setRate] = useState(3.8551);\r\n  const [currency, setCurrency] = useState(\"USD\");\r\n  const [valuePLN, setValuePLN] = useState(1.00);\r\n  const [valueCUR, setValueCUR] = useState(1.00);\r\n\r\n  const getBid = (currency = \"USD\") => currencyList.filter(cur => cur.code === currency)[0].bid;\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"savedList\", JSON.stringify(savedList));\r\n  }, [savedList]);\r\n\r\n  const fetchData = useCallback(async () => {\r\n    if (!dataReceived) {\r\n      console.log(\"Connecting to NBP\");\r\n      try {\r\n        const response = await fetch(\"https://api.nbp.pl/api/exchangerates/tables/C/?format=json\");\r\n        const jsonData = await response.json();\r\n        console.log(\"Response received\");\r\n        setDataReceived(true);\r\n        setCurrencyList(jsonData[0].rates);\r\n        setCurrency(jsonData[0].rates[0].code);\r\n        setRate(jsonData[0].rates[0].bid);\r\n        setValuePLN(Number(rate).toFixed(2));\r\n      } catch (error) {\r\n        console.log(\"Can't connect to NBP\");\r\n        console.log(error);\r\n      }\r\n    } else {\r\n      return null;\r\n    }\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  return (\r\n    <main>\r\n      <Header />\r\n      <div className=\"box\">\r\n        <Converter\r\n          setCurrency={setCurrency}\r\n          currency={currency}\r\n          valuePLN={valuePLN}\r\n          setValuePLN={setValuePLN}\r\n          valueCUR={valueCUR}\r\n          setValueCUR={setValueCUR}\r\n          getBid={getBid}\r\n          currencyList={currencyList}\r\n          setRate={setRate}\r\n          rate={rate}\r\n          savedList={savedList}\r\n          setSavedList={setSavedList}\r\n        />\r\n        <List savedList={savedList} setSavedList={setSavedList} />\r\n      </div>\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}